<?php

namespace AppBundle\Repository;

use AppBundle\Controller\Post\ListingController;
use AppBundle\Entity\Post;
use Doctrine\ORM\Mapping;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends \Doctrine\ORM\EntityRepository
{
    private static $options;

    public function __construct($em, Mapping\ClassMetadata $class)
    {
        parent::__construct($em, $class);
        try {
            self::$options = array(
                'period' => array(
                    ListingController::ALL_TIME_PERIOD_KEY => (new \DateTime())->setTimestamp(0),
                    ListingController::THIS_YEAR_PERIOD_KEY => (new \DateTime())->sub(new \DateInterval('P1Y')),
                    ListingController::THIS_MONTH_PERIOD_KEY => (new \DateTime())->sub(new \DateInterval('P1M')),
                    ListingController::THIS_WEEK_PERIOD_KEY => (new \DateTime())->sub(new \DateInterval('P7D')),
                    ListingController::TODAY_PERIOD_KEY => (new \DateTime())->sub(new \DateInterval('P1D')),
                )
            );
        }
        catch(\Exception $e)
        {
            throw new \RuntimeException('Should never be called');
        }
    }


    public function findMostLatestPublished()
    {
        return $this->_em->createQueryBuilder()
            ->select('post')
            ->from(Post::class, 'post')
            ->where('post.published = 1')
            ->orderBy('post.lastUpdate', 'DESC')
            ->getQuery()->getResult();
    }

    public function findMostLikedPublished(array $options = array())
    {
        $queryBuilder = $this->_em->createQueryBuilder()
            ->select('post')
            ->from(Post::class, 'post')
            ->where('post.published = 1');


        if (array_key_exists('period', $options)) {
            if(!array_key_exists($options['period'], self::$options['period'])) {
                $period = ListingController::DEFAULT_PERIOD_KEY;
            } else {
                $period = self::$options['period'][$options['period']];
            }

            $queryBuilder
                ->andWhere('post.lastUpdate > :period')
                ->setParameter('period', $period);
        }

        return $queryBuilder->orderBy('SIZE(post.likeVotes)', 'DESC')
            ->getQuery()->getResult();
    }

    public function findMostFavoritePublished(array $options = array())
    {
        $queryBuilder = $this->_em->createQueryBuilder()
            ->select('post')
            ->from(Post::class, 'post')
            ->where('post.published = 1');

        if (array_key_exists('period', $options)) {
            if(!array_key_exists($options['period'], self::$options['period'])) {
                $period = ListingController::DEFAULT_PERIOD_KEY;
            } else {
                $period = self::$options['period'][$options['period']];
            }

            $queryBuilder
                ->andWhere('post.lastUpdate > :period')
                ->setParameter('period', $period);
        }

        return $queryBuilder->orderBy('SIZE(post.favoriteVotes)', 'DESC')
            ->getQuery()->getResult();
    }

    public function findMostRisingPublished(array $options = array())
    {
        $queryBuilder = $this->_em->createQueryBuilder()
            ->select('post')
            ->from(Post::class, 'post')
            ->where('post.published = 1');

        if (array_key_exists('period', $options)) {
            if(!array_key_exists($options['period'], self::$options['period'])) {
                $period = ListingController::DEFAULT_PERIOD_KEY;
            } else {
                $period = self::$options['period'][$options['period']];
            }

            $queryBuilder
                ->andWhere('post.lastUpdate > :period')
                ->setParameter('period', $period);
        }

        return $queryBuilder->orderBy('COUNT(post.likeVotes)', 'DESC')
            ->getQuery()->getResult();
    }

    public function getRandomPost($number = 1)
    {
        $ids = $this->createQueryBuilder('post')
            ->select('post.id')
            ->where('post.published = 1')
            ->getQuery()
            ->getResult()
        ;

        shuffle($ids);
        if(count($ids) > $number)
        {
            array_slice($ids, $number);
        }

        $posts = $this->createQueryBuilder('post')
            ->select('post')
            ->where('post.id IN (:ids)')
            ->setParameter('ids', $ids)
            ->getQuery()
            ->getResult();

        shuffle($posts);

        return $posts;
    }
}
